{"version":3,"file":"static/js/756.ce002eb8.chunk.js","mappings":"yQAsBA,MA0TA,EA1ToBA,KAClB,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAOC,IAASF,EAAAA,EAAAA,UAAS,OACzBG,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,KAC1BK,EAAQC,IAAUN,EAAAA,EAAAA,WAAS,IAC3BO,EAASC,IAAWR,EAAAA,EAAAA,WAAS,IAC7BS,EAAUC,IAAaV,EAAAA,EAAAA,UAAS,IAChCW,EAAWC,IAAiBZ,EAAAA,EAAAA,UAAS,CAAC,IAEtCa,EAAaC,IAAkBd,EAAAA,EAAAA,UAAS,IACxCe,EAAcC,IAAmBhB,EAAAA,EAAAA,UAAS,CAAC,IAG3CiB,EAAOC,IAAYlB,EAAAA,EAAAA,UAAS,IAC5BmB,EAAQC,IAAapB,EAAAA,EAAAA,UAAS,CAAC,IAG/BqB,EAAYC,IAAiBtB,EAAAA,EAAAA,UAAS,IACtCuB,EAAaC,IAAkBxB,EAAAA,EAAAA,UAAS,CAAC,IAEzCyB,EAAYC,IAAiB1B,EAAAA,EAAAA,WAAS,IACtC2B,EAAUC,IAAe5B,EAAAA,EAAAA,UAAS,KAClC6B,EAAUC,IAAe9B,EAAAA,EAAAA,UAAS,IAElC+B,EAAYC,IAAiBhC,EAAAA,EAAAA,UAAS,IACtCiC,EAAYC,IAAiBlC,EAAAA,EAAAA,UAAS,CAAC,IACvCmC,EAAYC,IAAiBpC,EAAAA,EAAAA,UAAS,CAAC,IACvCqC,EAAWC,IAAgBtC,EAAAA,EAAAA,UAAS,CAAC,GAE5C2B,EAASY,KAAKC,IACZA,EAAKC,KAAqB,aAAdD,EAAKC,MAAsBC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,MAAO,SAAUC,SAAA,CAAEL,EAAKC,KAAK,KAACK,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAA0C,aAAdP,EAAKC,MAAsBC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,MAAO,OAAQC,SAAA,CAAEL,EAAKC,KAAK,KAACK,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAA2BP,EAAKC,KAC9OD,EAAKQ,UAAY,IAAIC,KAAKT,EAAKQ,WAAWE,cAAc,KA8E1DC,EAAAA,EAAAA,YAAU,QAGP,IA0GH,OACET,EAAAA,EAAAA,MAAA,OAAAG,SAAA,CAEGtC,GACCuC,EAAAA,EAAAA,KAACM,EAAAA,cAAa,CAACC,KAAM,GAAIT,MAAM,uBAAuBU,QAASjD,GAAuB,IAAbI,IAAqB,MAChGiC,EAAAA,EAAAA,MAACa,EAAAA,EAAM,CACLC,qBAAmB,EAMnBC,WAAW,EACXC,SAAU,KACVC,KAAMlC,EACNmC,QAASlC,EAAcmB,SAAA,EAGvBC,EAAAA,EAAAA,KAACe,EAAAA,EAAW,CAAAhB,UACVC,EAAAA,EAAAA,KAAA,MAAAD,SAAK,uBAMPC,EAAAA,EAAAA,KAACgB,EAAAA,EAAa,CAAAjB,UAGZC,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CAEVC,gBAAgB,EAChBC,KAAMtC,EAENuC,QAAS,CACP,CAAEC,KAAM,YAAaC,MAAO,QAC5B,CAAED,KAAM,OAAQC,MAAO,QACvB,CAAED,KAAM,OAAQC,MAAO,UAEvB,CAAED,KAAM,UAAWC,MAAO,YAI5BC,sBAAuB,GACvBC,SAAU,GACVC,yBAA0B,GAC1BC,gBAAiB,EACjBC,qBAAmB,EACnBC,mBAAiB,EACjBC,SAAU,iBAOd7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAa,CAACjC,MAAO,CAAEkC,MAAO,OAAQC,SAAU,UAAWjC,UAE1DC,EAAAA,EAAAA,KAAA,UAAQL,KAAK,SACXM,UAAU,gCAEVgC,QAASA,IAAMrD,GAAc,GAC7B,eAAa,QAAOmB,SAAC,gBAM3BC,EAAAA,EAAAA,KAAA,OAAAD,UAQEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKF,UAClBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWF,UACxBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAOJ,MAAO,CAAEqC,QAAS,QAASnC,UAC/CC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKF,UAClBH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,MAAKF,SAAA,EAClBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+LAWX,C,uIC3RV,MAAMoC,EAAS,CACbC,kBAAmB,CACjBtC,MAAO,wBACPuC,OAAQ,IACRC,SAAU,OACVC,UAAW,IACXC,aAAc,KAEhBC,eAAgB,CACd3C,MAAO,UACPyC,UAAW,MACXG,UAAW,OACXC,WAAY,MACZC,WAAY,6CACZJ,aAAc,MACdK,eAAgB,QAGlBC,aAAc,CACZR,SAAU,OACVS,UAAW,QACXhB,MAAO,SAILiB,EAAqBC,IAAwC,IAAvC,MAAEC,EAAK,cAAEC,EAAa,QAAEC,GAASH,EAS3D,OACEjD,EAAAA,EAAAA,KAACqD,EAAAA,EAAK,CACJ1D,KAAK,SACLyD,QAAS,CACPE,MAAOF,EAAQN,aACfS,KAAMH,EAAQG,MAEhB5C,WAAS,EACTuC,WAAiBM,IAAVN,EAAsB,GAAKA,EAClCO,WAAY,CACVC,IAAK,EACLC,YAAa,aAEfC,SArBkBC,IACpB,MAAQX,MAAOY,GAAgBD,EAAME,OACV,KAAvBD,EAAYE,OAIhBb,EAAcc,SAASH,EAAa,KAHlCX,GAGsC,GAgBtC,EAUNH,EAAmBkB,aAAe,CAChChB,WAAOM,GAGT,MAAMW,GAAiBC,EAAAA,EAAAA,GAAWjC,EAAXiC,CAAmBpB,GAEpCqB,EAAgBC,IAAA,IAAC,MAAEpB,GAAOoB,EAAA,OAAKtE,EAAAA,EAAAA,KAAA,QAAAD,SAAOmD,EAAMqB,sBAA4B,EAExEC,EAAoBC,IACxBzE,EAAAA,EAAAA,KAAC0E,EAAAA,GAAgB,IAAKD,EAAOE,mBAAoBN,IAa7CO,EAAc,GAigBpB,SAAeR,EAAAA,EAAAA,GAAWjC,EAA1B,EA7fA,SAAqBsC,GAAQ,IAADI,EAC1B,MAAMtD,EAAwBkD,EAAMlD,uBAC7BC,EAAUsD,IAAe5H,EAAAA,EAAAA,UAASuH,EAAMjD,WAgExCuD,EAAWC,IAAgB9H,EAAAA,EAAAA,UAAS,IAE3C,IAAI2E,EAAW,mBAEO2B,GAAlBiB,EAAM5C,UAA4C,OAAnB4C,EAAM5C,WACvCA,EAAW4C,EAAM5C,SAAW,gBAG9B,MASMoD,GAAcC,EAAAA,EAAAA,QAAO,MAErBC,GAAcC,EAAAA,EAAAA,cACjBC,IACCJ,EAAYK,QAAQC,WAAWF,EAAQ,GAEzC,CAACJ,IASGO,EAAkBA,CAACtC,EAAOE,IAIvBA,EAAQqC,MAYXC,GAAYtB,EAAAA,EAAAA,GAEhB,YAFgBA,EAGhBuB,IAAA,IAAC,MAAEzC,EAAK,QAAEE,KAAYwC,GAAWD,EAAA,OACjC3F,EAAAA,EAAAA,KAAC6F,EAAAA,GAAMC,KAAI,CACT7F,UAAWuF,EAAgBtC,EAAOE,GAClCF,MAAOA,KACH0C,GACJ,KAGGG,EAAmBC,IAAwB9I,EAAAA,EAAAA,UAChDuH,EAAMhD,0BAGR,IAAIwE,EAA6C,QAAhCpB,EAAGJ,EAAMyB,+BAAuB,IAAArB,EAAAA,EAAI,GAErD,GAA6B,IAAzBoB,EAAcE,QAAgB1B,EAAMrD,QAAQ+E,QAAU,EACxD,IAAK,IAAIC,EAAQ,EAAGA,EAAQ3B,EAAMrD,QAAQ+E,OAAS,EAAGC,IACpDH,EAAcI,KAAK5B,EAAMrD,QAAQgF,GAAO/E,MAI5C,MAAOiF,EAAqBC,IAA0BrJ,EAAAA,EAAAA,UAAS,IAC1D,IAAIsJ,IAAIP,KAGb,OACErG,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWF,UACxBH,EAAAA,EAAAA,MAAC6G,EAAAA,GAAI,CACHtF,KAAMsD,EAAMtD,KACZC,QAASqD,EAAMrD,QACfsF,SAAUjC,EAAMiC,SAnCNvF,GAASA,EAAKwF,GAmCc,KAAK5G,SAAA,EAE3CC,EAAAA,EAAAA,KAAC4G,EAAAA,GAAgB,KACjB5G,EAAAA,EAAAA,KAACwE,EAAgB,CAACqC,IAAKjC,KAEvB5E,EAAAA,EAAAA,KAAC8G,EAAAA,GAAY,CACXC,eAC2B,OAAzBtC,EAAMsC,qBAAmDvD,GAAxBiB,EAAMsC,eACnCtC,EAAMsC,eACN,MAIR/G,EAAAA,EAAAA,KAACgH,EAAAA,GAAa,CACZzF,sBAAuBA,EACvBC,SAAUA,EACVyF,iBAAkBnC,KAGpB9E,EAAAA,EAAAA,KAACkH,EAAAA,GAAW,CAACC,aAAa,MAE1BnH,EAAAA,EAAAA,KAAC0E,EAAAA,GAAgB,CACfmC,SAC4BrD,IAA1BiB,EAAM2C,iBACJ3C,EAAM2C,gBAAgBjB,OAAS,EAC7B1B,EAAM2C,gBACN,GAENC,0BAA2B,CACzB,qBACA,WACA,kBACA,QACA,WACA,eAEFC,gBAAiBnD,SAEuBX,IAAzCiB,EAAM8C,gCACL9C,EAAM8C,+BAA+BpB,OAAS,GAC9CnG,EAAAA,EAAAA,KAACwH,EAAAA,GAAc,CACbC,iBAAkBhD,EAAM8C,+BACxBG,eAAgB,KAEhB,MAEJ1H,EAAAA,EAAAA,KAAC2H,EAAAA,GAAmB,SACSnE,IAA5BiB,EAAMmD,mBACLnD,EAAMmD,kBAAkBzB,OAAS,GACjCnG,EAAAA,EAAAA,KAAC6H,EAAAA,GAAY,CACXC,WAAYrD,EAAMmD,kBAClBG,gBAC8BvE,IAA5BiB,EAAMuD,mBACJvD,EAAMuD,kBAAkB7B,OAAS,EAC/B1B,EAAMuD,kBACN,KAGN,MACJhI,EAAAA,EAAAA,KAACiI,EAAAA,GAAW,CACVvG,gBAC4B,OAA1B+C,EAAM/C,sBACsB8B,IAA1BiB,EAAM/C,gBACJ+C,EAAM/C,gBACN,GAENwG,mBAAoB,IAGrBzD,EAAM0D,aACLnI,EAAAA,EAAAA,KAACoI,EAAAA,GAAc,CACbrD,UAAWN,EAAMM,UACjBsD,kBAAmB5D,EAAM6D,mBAG3BtI,EAAAA,EAAAA,KAACoI,EAAAA,GAAc,CACbrD,UAAWA,EAEXsD,kBAAoBtD,IAxHFA,KAC5BC,EAAaD,GACb,IACEN,EAAM8D,cAAcxD,EACtB,CAAE,MAAOyD,GAAS,GAqHNC,CAAqB1D,EAAU,KAKrC/E,EAAAA,EAAAA,KAAC0I,EAAAA,GAAiB,KAClB1I,EAAAA,EAAAA,KAAC2I,EAAAA,GAAkB,SAEUnF,IAA5BiB,EAAMmD,mBACLnD,EAAMmD,kBAAkBzB,OAAS,GACjCnG,EAAAA,EAAAA,KAAC4I,EAAAA,GAAiB,IAChB,MAEJ5I,EAAAA,EAAAA,KAAC6I,EAAAA,GAAmB,KACpB7I,EAAAA,EAAAA,KAAC8I,EAAAA,GAAgB,KACjB9I,EAAAA,EAAAA,KAAC6F,EAAAA,GAAK,CACJkD,cAAerD,EACf+B,iBAAkBhD,EAAMuE,6BAEKxF,IAA9BiB,EAAMwE,qBACLxE,EAAMwE,oBAAoB9C,OAAS,GACnCnG,EAAAA,EAAAA,KAACkJ,EAAAA,GAAmB,CAClBD,oBAAqBxE,EAAMwE,sBAE3B,UACoBzF,IAAvBiB,EAAM0E,cAA8B1E,EAAM0E,aAAahD,OAAS,GAC/DnG,EAAAA,EAAAA,KAACoJ,EAAAA,GAAqB,CAACD,aAAc1E,EAAM0E,eACzC,KAEH1E,EAAM7C,mBAAoB5B,EAAAA,EAAAA,KAACqJ,EAAAA,GAAY,IAAM,MAC9CrJ,EAAAA,EAAAA,KAACsJ,EAAAA,GAAc,CAACC,qBAAmB,IAElC9E,EAAMvD,eACL,CACEuD,EAAM+E,eACJxJ,EAAAA,EAAAA,KAACyJ,EAAAA,GAAc,CAACC,kBAAgB,EAACC,eAAe,IAC9C,OAGN3J,EAAAA,EAAAA,KAACyJ,EAAAA,GAAc,CAACC,kBAAgB,EAACC,eAAe,KAGlD3J,EAAAA,EAAAA,KAAC4J,EAAAA,GAAa,CACZC,uBAAwBpF,EAAMoF,0BAGhC7J,EAAAA,EAAAA,KAAC8J,EAAAA,GAAqB,CACpB/D,kBAAmBA,EACnBgE,0BAA2B/D,KAG7BhG,EAAAA,EAAAA,KAACgK,EAAAA,GAAO,SAEqBxG,IAA5BiB,EAAMmD,mBACLnD,EAAMmD,kBAAkBzB,OAAS,GACjCnG,EAAAA,EAAAA,KAACiK,EAAAA,GAAe,IACd,KACHxF,EAAMyF,WAAYlK,EAAAA,EAAAA,KAACmK,EAAAA,GAAc,CAACC,oBAAkB,IAAM,MAC3DpK,EAAAA,EAAAA,KAACqK,EAAAA,GAAiB,CAChBC,iBACwB9G,IAAtBiB,EAAM6F,aAA6B7F,EAAM6F,YAAYnE,OAAS,EAC1D1B,EAAM6F,YACN,GAENC,kBACyB/G,IAAvBiB,EAAM8F,cAA8B9F,EAAM8F,aAAapE,OAAS,EAC5D1B,EAAM8F,aACN,KAIN9F,EAAM+F,aAAwD,MAAzCxK,EAAAA,EAAAA,KAACyK,EAAAA,GAAa,CAACC,sBAAoB,IAExDjG,EAAMkG,gBAAoC,MAAlB3K,EAAAA,EAAAA,KAAC4K,EAAAA,GAAW,KAEtC5K,EAAAA,EAAAA,KAAC6K,EAAAA,GAAa,IAEbpG,EAAMvD,eAAiB,MACtBlB,EAAAA,EAAAA,KAAC8K,EAAAA,GAAW,CAAC3F,YAAaA,IAG1BV,EAAMsG,gBAEJ,MADF/K,EAAAA,EAAAA,KAACgL,EAAAA,GAAW,CAACC,UAAW,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,WA+KxDjL,EAAAA,EAAAA,KAACkL,EAAAA,EAAY,CACXC,IAAKlG,EACL9D,KAAMsD,EAAM2G,UACZhK,QAASqD,EAAM4G,cACf7J,SAAUA,EACVoG,uBAC8BpE,IAA5BiB,EAAMmD,mBACJnD,EAAMmD,kBAAkBzB,OAAS,EAC/B1B,EAAMmD,kBACN,GAENI,uBAC8BxE,IAA5BiB,EAAMuD,mBACJvD,EAAMuD,kBAAkB7B,OAAS,EAC/B1B,EAAMuD,kBACN,GAENsD,gBA9emBC,IACvB,MAAMC,EAAgB,CACpBC,KAAM,CAAEC,MAAM,GACdC,KAAM,CACJhM,KAAM,UACNiM,QAAS,QACTC,QAAS,CAAEC,KAAM,UACjBC,QAAS,CAAED,KAAM,WAEnBE,UAAW,CAAEC,WAAY,SAE3B,IAAK,IAAIC,EAAW,EAAGA,EAAW,EAAGA,GAAY,EAC/CX,EAAUY,WAAWD,EAAU,EAAGA,EAAU,GAC5CX,EAAUY,WAAWD,EAAU,EAAGA,EAAU,GAC5CE,OAAOC,OAAOd,EAAUe,OAAOJ,GAAUK,QAAQ,GAAIf,GACrDY,OAAOC,OAAOd,EAAUe,OAAOJ,GAAUK,QAAQ,GAAIf,GAEvDD,EAAUe,OAAO,GAAGE,OAAS,GAC7BjB,EAAUe,OAAO,GAAGC,QAAQ,GAAGd,KAAO,CAAEC,MAAM,EAAMnL,KAAM,IAC1DgL,EAAUe,OAAO,GAAGC,QAAQ,GAAGE,OAAS,cACxClB,EAAUe,OAAO,GAAGC,QAAQ,GAAGd,KAAO,CAAEC,MAAM,EAAMnL,KAAM,IAC1DgL,EAAUmB,UAAU,GAAGC,OAAS,CAC9B,+BACA,iDACA,UACA,QAEFpB,EAAUmB,UAAU,GAAGC,OAAS,CAC9B,IAAIxM,KACJ,SACA,6BACA,iBAEFoL,EAAUqB,OAAO,CAAC,EAAE,EA8chBC,gBA3cmBtB,IACvB,MAAM,QAAEuB,GAAYvB,EACpB,IAAIwB,EAAkBD,EAAQE,OAAS,EACvC,IAAK,IAAId,EAAW,EAAGA,EAAW,EAAGA,GAAY,EAC/CX,EAAUY,WACRY,EAAkBb,EAClB,EACAa,EAAkBb,EAClB,GAEFE,OAAOC,OAAOd,EAAUe,OAAOS,EAAkBb,GAAUK,QAAQ,GAAI,CACrEd,KAAM,CAAEC,MAAM,GACdM,UAAW,CAAEC,WAAY,WAG7BV,EAAUe,OAAOS,GAAiBR,QAAQ,GAAGrJ,MAC3C,uBACF6J,GAAmB,EACnBxB,EAAUe,OAAOS,GAAiBR,QAAQ,GAAGrJ,MAAQ,YACrD6J,GAAmB,EACnBxB,EAAUe,OAAOS,GAAiBR,QAAQ,GAAGrJ,MAAQ,SACrDqI,EAAUe,OAAOS,GAAiBR,QAAQ,GAAGd,KAAO,CAAEwB,QAAQ,EAAM,EAubhElI,UAAWN,EAAM0D,YAAc1D,EAAMM,UAAYA,EACjDmI,OA7aUC,IACdA,EAASC,KAAKC,cAAcC,MAAMC,IAChCC,IACE,IAAIC,KAAK,CAACF,GAAS,CAAE5N,KAAM,6BAC3BkC,EACD,GACD,MA2aN,G","sources":["jsx/components/AppsMenu/AppProfile/NotComplete.js","jsx/components/AppsMenu/AppProfile/TableExport.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport 'filepond/dist/filepond.min.css';\r\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\r\nimport { FilePond } from 'react-filepond';\r\nimport {\r\n  addFile, getUserFiles, getProcessComments,\r\n  getClientBussiness,\r\n  uploadFiles\r\n} from \"../../../../util/APIUtils.js\";\r\nimport { RotateSpinner } from \"react-spinners-kit\";\r\n/// Image\r\nimport Icon from \"@mui/material/Icon\";\r\nimport {\r\n  Table,\r\n} from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport swal from \"sweetalert\";\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport TableExport from \"./TableExport.jsx\";\r\nconst PostDetails = () => {\r\n  const [sendMessage, setSendMessage] = useState(false);\r\n  const [theId, setId] = useState(null);\r\n  const [docs, setDocs] = useState([]);\r\n  const [isLoad, seLoad] = useState(false);\r\n  const [isLoad2, seLoad2] = useState(false);\r\n  const [incompId, setIncomp] = useState(0);\r\n  const [incompObj, setIncompObje] = useState({});\r\n\r\n  const [directorsId, setdirectorsId] = useState(0);\r\n  const [directorsObj, setdirectorsObj] = useState({});\r\n\r\n\r\n  const [regId, setregId] = useState(0);\r\n  const [regObj, setregObj] = useState({});\r\n\r\n\r\n  const [articlesId, setarticlesId] = useState(0);\r\n  const [articlesObj, setarticlesObj] = useState({});\r\n\r\n  const [postModal2, setPostModal2] = useState(false);\r\n  const [comments, setComments] = useState([]);\r\n  const [bussType, setBussType] = useState(0);\r\n\r\n  const [invoicesId, setinvoicesId] = useState(0);\r\n  const [invoicesbj, setinvoicesbj] = useState({});\r\n  const [partnerobj, setpartnerobj] = useState({});\r\n  const [byeLawobj, setbyeLawobj] = useState({});\r\n\r\n  comments.map((data) => {\r\n    data.type = data.type === \"VERIFIED\" ? <div style={{ color: \"green\" }}>{data.type} <i className=\"fa fa-check\"></i></div> : (data.type === \"DECLINED\" ? <div style={{ color: \"red\" }}>{data.type} <i className=\"fa fa-times\"></i></div> : data.type)\r\n    data.dateAdded = new Date(data.dateAdded).toDateString()\r\n  })\r\n\r\n  function handleEdit(type) {\r\n    if (type === \"INCORPORATION\") {\r\n      setId(incompObj.id)\r\n      setIncompObje({})\r\n\r\n    }\r\n\r\n    else if (type === \"DIRECTORS\") {\r\n      setId(directorsObj.id)\r\n      setdirectorsObj({})\r\n\r\n    }\r\n\r\n\r\n    else if (type === \"REG_ADDRESS\") {\r\n      setId(regObj.id)\r\n      setregObj({})\r\n\r\n    }\r\n\r\n    else if (type === \"ARTICLES\") {\r\n      setId(articlesObj.id)\r\n      setarticlesObj({})\r\n\r\n    }\r\n\r\n\r\n    else if (type === \"PAID_INVOICES\") {\r\n      setId(invoicesbj.id)\r\n      setinvoicesbj({})\r\n\r\n    }\r\n\r\n\r\n    else if (type === \"PARTNERSHIP_DEED\") {\r\n      setId(partnerobj.id)\r\n      setpartnerobj({})\r\n\r\n    }\r\n\r\n\r\n    else if (type === \"BYE_LAWS_OR_CONSTITUTION\") {\r\n      setId(byeLawobj.id)\r\n      setbyeLawobj({})\r\n\r\n    }\r\n\r\n  }\r\n\r\n  function getComments(data) {\r\n    setComments([])\r\n    getProcessComments(data)\r\n      .then((response) => {\r\n        setComments(response)\r\n        //\tsetPostModal(false);\r\n        //\tswal('Good job!', 'Successfully Added', \"success\");\r\n\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        swal('Oops', error.message, \"error\");\r\n      });\r\n  }\r\n\r\n  function openDetails2(data, process) {\r\n    //\tsetPostModal(false)\r\n    const getme = {\r\n      process: process,\r\n      processId: data.id\r\n    }\r\n    getComments(getme)\r\n    setPostModal2(true)\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n\r\n\r\n  }, []);\r\n\r\n  function getDocs() {\r\n    seLoad(true)\r\n    getUserFiles()\r\n      .then((response) => {\r\n        setDocs(response)\r\n        //setIncompObje\r\n        response.map((option, key) => {\r\n\r\n          if (option.type === \"INCORPORATION\") {\r\n            setIncompObje(option)\r\n          }\r\n\r\n\r\n          else if (option.type === \"DIRECTORS\") {\r\n\r\n            setdirectorsObj(option)\r\n          }\r\n\r\n\r\n          else if (option.type === \"REG_ADDRESS\") {\r\n\r\n            setregObj(option)\r\n          }\r\n\r\n\r\n          else if (option.type === \"ARTICLES\") {\r\n\r\n            setarticlesObj(option)\r\n          }\r\n\r\n\r\n          else if (option.type === \"PAID_INVOICES\") {\r\n\r\n            setinvoicesbj(option)\r\n          }\r\n\r\n          else if (option.type === \"PARTNERSHIP_DEED\") {\r\n\r\n            setpartnerobj(option)\r\n          }\r\n\r\n\r\n          else if (option.type === \"BYE_LAWS_OR_CONSTITUTION\") {\r\n\r\n            setbyeLawobj(option)\r\n          }\r\n\r\n\r\n\r\n        })\r\n        //\tsetPostModal(false);\r\n        //\tswal('Good job!', 'Successfully Added', \"success\");\r\n\r\n        seLoad(false)\r\n\r\n      })\r\n      .catch((error) => {\r\n        seLoad(false)\r\n        console.log(error);\r\n        //swal('Oops', error.message, \"error\");\r\n      });\r\n  }\r\n\r\n\r\n  const handleAddFormSubmit = (type, fileId) => {\r\n    // event.preventDefault();\r\n\r\n    const newContact = {\r\n      id: theId,\r\n      fileId: fileId,\r\n      type: type\r\n    };\r\n    // const newContacts = [...contacts, newContact];\r\n    //setContacts(newContacts);\r\n\r\n    console.log(newContact)\r\n    //\talert(JSON.stringify(addFormData))\r\n    seLoad2(true)\r\n    addFile(newContact)\r\n      .then((response) => {\r\n        seLoad2(false);\r\n        setId(null);\r\n        setIncomp(0);\r\n        setdirectorsId(0)\r\n        setarticlesId(0)\r\n        setinvoicesId(0)\r\n        setregId(0)\r\n        swal('Good job!', 'Successfully Added', \"success\");\r\n        getDocs()\r\n\r\n      })\r\n      .catch((error) => {\r\n        seLoad2(false);\r\n        console.log(error);\r\n        swal('Oops', error.message, \"error\");\r\n      });\r\n\r\n    //  addFormData.Cust_Name = addFormData.Location = addFormData.Date_Join = '';         \r\n\r\n\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      {isLoad2 ?\r\n        <RotateSpinner size={30} color=\"rgba(41, 106, 176,1)\" loading={isLoad && incompId !== 0} /> : null}\r\n      <Dialog\r\n        disableEnforceFocus\r\n        //className=\"modal fade\"\r\n        //  className=\"fade bd-example-modal-lg\"\r\n        // fullscreen={true} \r\n        //dialogClassName=\"modal-90w\"\r\n        /// size=\"lg\"\r\n        fullWidth={true}\r\n        maxWidth={\"lg\"}\r\n        open={postModal2}\r\n        onClose={setPostModal2}\r\n      >\r\n\r\n        <DialogTitle>\r\n          <h4 >Approval Detail</h4>\r\n\r\n\r\n\r\n          {/* <button type=\"button\" className=\"btn-close\" onClick={()=> setPostModal2(false)} data-dismiss=\"modal\"></button> */}\r\n        </DialogTitle>\r\n        <DialogContent\r\n\r\n        >\r\n          <TableExport\r\n\r\n            hideDataExport={true}\r\n            rows={comments}\r\n            //rows={this.state.colors[1]===\"primary\"?finished: dataTemp}\r\n            columns={[\r\n              { name: 'dateAdded', title: 'Date' },\r\n              { name: 'user', title: 'User' },\r\n              { name: 'type', title: 'Action' },\r\n\r\n              { name: 'comment', title: 'Comment' },\r\n              // { name: 'actions', title: 'Actions' },\r\n            ]}\r\n            //  exportColumns={this.state.columns2}\r\n            defaultExpandedGroups={[]}\r\n            grouping={[]}\r\n            defaultHiddenColumnNames={[]}\r\n            defaultPageSize={0}\r\n            hideSelectionExport\r\n            infiniteScrolling\r\n            fileName={\"Directors\"}\r\n\r\n\r\n          />\r\n\r\n        </DialogContent>\r\n\r\n        <DialogActions style={{ width: \"100%\", overflow: \"hidden\" }}>\r\n\r\n          <button type=\"button\"\r\n            className=\"btn shadow btn-xs btn-primary\"\r\n\r\n            onClick={() => setPostModal2(false)}\r\n            data-dismiss=\"modal\">\r\n            Close\r\n          </button>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n      <div>\r\n        {/* <PageTitle\r\n          activeMenu=\"Post Details\"\r\n          motherMenu=\"Advanced\"\r\n          pageContent=\"Post Details\"\r\n        /> */}\r\n        {/* row */}\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12\">\r\n            <div className=\"card\" style={{ padding: \"30px\" }}>\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <h4>Incomplete Steps</h4>\r\n                  <p>You have to first complete the previous steps before you can access this page. Please navigate on the menu for the previous steps or go to the dashboard to get quick links</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetails;\r\n","import React, { useState, useRef, useCallback, useContext } from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nimport {\r\n  GroupingState,\r\n  IntegratedGrouping,\r\n  SummaryState,\r\n  IntegratedSummary,\r\n  SelectionState,\r\n  IntegratedSelection,\r\n  DataTypeProvider,\r\n  SearchState,\r\n  IntegratedFiltering,\r\n  PagingState,\r\n  IntegratedPaging,\r\n  SortingState,\r\n  IntegratedSorting,\r\n  TreeDataState,\r\n  CustomTreeData,\r\n  FilteringState,\r\n} from \"@devexpress/dx-react-grid\";\r\nimport { GridExporter } from \"@devexpress/dx-react-grid-export\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableHeaderRow,\r\n  TableGroupRow,\r\n  GroupingPanel,\r\n  TableSummaryRow,\r\n  TableSelection,\r\n  DragDropProvider,\r\n  Toolbar,\r\n  ExportPanel,\r\n  SearchPanel,\r\n  PagingPanel,\r\n  ColumnChooser,\r\n  TableColumnVisibility,\r\n  TableColumnResizing,\r\n  TableColumnReordering,\r\n  TableFixedColumns,\r\n  VirtualTable,\r\n  TableTreeColumn,\r\n  TableFilterRow,\r\n} from \"@devexpress/dx-react-grid-material-ui\";\r\n\r\nimport Input from \"@material-ui/core/Input\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport saveAs from \"file-saver\";\r\n\r\nconst styles = {\r\n  cardCategoryWhite: {\r\n    color: \"rgba(255,255,255,.62)\",\r\n    margin: \"0\",\r\n    fontSize: \"14px\",\r\n    marginTop: \"0\",\r\n    marginBottom: \"0\",\r\n  },\r\n  cardTitleWhite: {\r\n    color: \"#FFFFFF\",\r\n    marginTop: \"0px\",\r\n    minHeight: \"auto\",\r\n    fontWeight: \"300\",\r\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\r\n    marginBottom: \"3px\",\r\n    textDecoration: \"none\",\r\n  },\r\n\r\n  numericInput: {\r\n    fontSize: \"14px\",\r\n    textAlign: \"right\",\r\n    width: \"100%\",\r\n  },\r\n};\r\n\r\nconst CurrencyEditorBase = ({ value, onValueChange, classes }) => {\r\n  const handleChange = (event) => {\r\n    const { value: targetValue } = event.target;\r\n    if (targetValue.trim() === \"\") {\r\n      onValueChange();\r\n      return;\r\n    }\r\n    onValueChange(parseInt(targetValue, 10));\r\n  };\r\n  return (\r\n    <Input\r\n      type=\"number\"\r\n      classes={{\r\n        input: classes.numericInput,\r\n        root: classes.root,\r\n      }}\r\n      fullWidth\r\n      value={value === undefined ? \"\" : value}\r\n      inputProps={{\r\n        min: 0,\r\n        placeholder: \"Filter...\",\r\n      }}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nCurrencyEditorBase.propTypes = {\r\n  value: PropTypes.number,\r\n  onValueChange: PropTypes.func.isRequired,\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nCurrencyEditorBase.defaultProps = {\r\n  value: undefined,\r\n};\r\n\r\nconst CurrencyEditor = withStyles(styles)(CurrencyEditorBase);\r\n\r\nconst DateFormatter = ({ value }) => <span>{value.toLocaleDateString()}</span>;\r\n\r\nconst DateTypeProvider = (props) => (\r\n  <DataTypeProvider {...props} formatterComponent={DateFormatter} />\r\n);\r\n\r\nconst onSave = (workbook) => {\r\n  workbook.xlsx.writeBuffer().then((buffer) => {\r\n    saveAs(\r\n      new Blob([buffer], { type: \"application/octet-stream\" }),\r\n      \"DataGrid.xlsx\"\r\n    );\r\n  });\r\n};\r\n\r\nconst columns = [];\r\nconst dateColumns = [];\r\nconst groupSummaryItems = [];\r\nconst totalSummaryItems = [];\r\n\r\nfunction MyComponent(props) {\r\n  const defaultExpandedGroups = props.defaultExpandedGroups;\r\n  const [grouping, setGrouping] = useState(props.grouping);\r\n\r\n  //const theColor = useContext(ThemeContext2);\r\n\r\n  const customizeHeader = (worksheet) => {\r\n    const generalStyles = {\r\n      font: { bold: true },\r\n      fill: {\r\n        type: \"pattern\",\r\n        pattern: \"solid\",\r\n        fgColor: { argb: \"D3D3D3\" },\r\n        bgColor: { argb: \"D3D3D3\" },\r\n      },\r\n      alignment: { horizontal: \"left\" },\r\n    };\r\n    for (let rowIndex = 1; rowIndex < 6; rowIndex += 1) {\r\n      worksheet.mergeCells(rowIndex, 1, rowIndex, 3);\r\n      worksheet.mergeCells(rowIndex, 4, rowIndex, 6);\r\n      Object.assign(worksheet.getRow(rowIndex).getCell(1), generalStyles);\r\n      Object.assign(worksheet.getRow(rowIndex).getCell(3), generalStyles);\r\n    }\r\n    worksheet.getRow(1).height = 20;\r\n    worksheet.getRow(1).getCell(1).font = { bold: true, size: 16 };\r\n    worksheet.getRow(1).getCell(4).numFmt = \"d mmmm yyyy\";\r\n    worksheet.getRow(1).getCell(4).font = { bold: true, size: 16 };\r\n    worksheet.getColumn(1).values = [\r\n      \"Uganda Christian University:\",\r\n      \"A Center of Excellence in the Heart of Africa:\",\r\n      \"Adress:\",\r\n      \"Web:\",\r\n    ];\r\n    worksheet.getColumn(4).values = [\r\n      new Date(),\r\n      \"Pesasa\",\r\n      \"P.O.Box 14, Kampala Uganda\",\r\n      \"www.pesasa.ug\",\r\n    ];\r\n    worksheet.addRow({});\r\n  };\r\n\r\n  const customizeFooter = (worksheet) => {\r\n    const { lastRow } = worksheet;\r\n    let currentRowIndex = lastRow.number + 2;\r\n    for (let rowIndex = 0; rowIndex < 3; rowIndex += 1) {\r\n      worksheet.mergeCells(\r\n        currentRowIndex + rowIndex,\r\n        1,\r\n        currentRowIndex + rowIndex,\r\n        6\r\n      );\r\n      Object.assign(worksheet.getRow(currentRowIndex + rowIndex).getCell(1), {\r\n        font: { bold: true },\r\n        alignment: { horizontal: \"right\" },\r\n      });\r\n    }\r\n    worksheet.getRow(currentRowIndex).getCell(1).value =\r\n      \"Exported From Pesasa\";\r\n    currentRowIndex += 1;\r\n    worksheet.getRow(currentRowIndex).getCell(1).value = \"pesasa.ug\";\r\n    currentRowIndex += 1;\r\n    worksheet.getRow(currentRowIndex).getCell(1).value = \"Pesasa\";\r\n    worksheet.getRow(currentRowIndex).getCell(1).font = { italic: true };\r\n  };\r\n\r\n  const [selection, setSelection] = useState([]);\r\n\r\n  let fileName = \"Pesasa.xlsx\";\r\n\r\n  if (props.fileName != undefined && props.fileName !== null) {\r\n    fileName = props.fileName + \"_Pesasa.xlsx\";\r\n  }\r\n\r\n  const onSave = (workbook) => {\r\n    workbook.xlsx.writeBuffer().then((buffer) => {\r\n      saveAs(\r\n        new Blob([buffer], { type: \"application/octet-stream\" }),\r\n        fileName\r\n      );\r\n    });\r\n  };\r\n\r\n  const exporterRef = useRef(null);\r\n\r\n  const startExport = useCallback(\r\n    (options) => {\r\n      exporterRef.current.exportGrid(options);\r\n    },\r\n    [exporterRef]\r\n  );\r\n\r\n  // const styles2 = {\r\n  //   white: {\r\n  //     color: theColor.color,\r\n  //   },\r\n  // };\r\n\r\n  const getClassByValue = (value, classes) => {\r\n    // if (value === \"pending\") return classes.pending;\r\n    // if (value === \"ATUHAIRE Precious\") return classes.declined;\r\n    // if (value === \"blue\") return classes.blue;\r\n    return classes.white;\r\n  };\r\n\r\n  const updateSelectionState = (selection) => {\r\n    setSelection(selection);\r\n    try {\r\n      props.passSelection(selection);\r\n    } catch (error) { }\r\n  };\r\n\r\n  const getRowId = (rows) => rows.id;\r\n\r\n  const TableCell = withStyles(\r\n    //   styles2,\r\n    \"TableCell\"\r\n  )(({ value, classes, ...restProps }) => (\r\n    <Table.Cell\r\n      className={getClassByValue(value, classes)}\r\n      value={value}\r\n      {...restProps}\r\n    />\r\n  ));\r\n\r\n  const [hiddenColumnNames, setHiddenColumnNames] = useState(\r\n    props.defaultHiddenColumnNames\r\n  );\r\n\r\n  let mobileColumns = props.mobileHiddenColumnNames ?? [];\r\n\r\n  if (mobileColumns.length === 0 && props.columns.length >= 2) {\r\n    for (let index = 1; index < props.columns.length - 1; index++) {\r\n      mobileColumns.push(props.columns[index].name);\r\n    }\r\n  }\r\n\r\n  const [mobileHiddenColumns, setMobileHiddenColumns] = useState([\r\n    ...new Set(mobileColumns),\r\n  ]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"showTable\">\r\n        <Grid\r\n          rows={props.rows}\r\n          columns={props.columns}\r\n          getRowId={props.getRowId ? getRowId : null}\r\n        >\r\n          <DragDropProvider />\r\n          <DateTypeProvider for={dateColumns} />\r\n\r\n          <SortingState\r\n            defaultSorting={\r\n              props.defaultSorting !== null || props.defaultSorting != undefined\r\n                ? props.defaultSorting\r\n                : []\r\n            }\r\n          />\r\n\r\n          <GroupingState\r\n            defaultExpandedGroups={defaultExpandedGroups}\r\n            grouping={grouping}\r\n            onGroupingChange={setGrouping}\r\n          />\r\n\r\n          <SearchState defaultValue=\"\" />\r\n\r\n          <DataTypeProvider\r\n            for={\r\n              props.currencyColumns !== undefined &&\r\n                props.currencyColumns.length > 0\r\n                ? props.currencyColumns\r\n                : []\r\n            }\r\n            availableFilterOperations={[\r\n              \"greaterThanOrEqual\",\r\n              \"lessThan\",\r\n              \"lessThanOrEqual\",\r\n              \"equal\",\r\n              \"notEqual\",\r\n              \"greaterThan\",\r\n            ]}\r\n            editorComponent={CurrencyEditor}\r\n          />\r\n          {props.filteringStateColumnExtensions !== undefined &&\r\n            props.filteringStateColumnExtensions.length > 0 ? (\r\n            <FilteringState\r\n              columnExtensions={props.filteringStateColumnExtensions}\r\n              defaultFilters={[]}\r\n            />\r\n          ) : null}\r\n\r\n          <IntegratedFiltering />\r\n          {props.totalSummaryItems !== undefined &&\r\n            props.totalSummaryItems.length > 0 ? (\r\n            <SummaryState\r\n              totalItems={props.totalSummaryItems}\r\n              groupItems={\r\n                props.groupSummaryItems !== undefined &&\r\n                  props.groupSummaryItems.length > 0\r\n                  ? props.groupSummaryItems\r\n                  : []\r\n              }\r\n            />\r\n          ) : null}\r\n          <PagingState\r\n            defaultPageSize={\r\n              props.defaultPageSize !== null ||\r\n                props.defaultPageSize !== undefined\r\n                ? props.defaultPageSize\r\n                : 30\r\n            }\r\n            defaultCurrentPage={0}\r\n          />\r\n\r\n          {props.mySelection ? (\r\n            <SelectionState\r\n              selection={props.selection}\r\n              onSelectionChange={props.changeSelection}\r\n            />\r\n          ) : (\r\n            <SelectionState\r\n              selection={selection}\r\n              //onSelectionChange={setSelection}\r\n              onSelectionChange={(selection) => {\r\n                updateSelectionState(selection);\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <IntegratedSorting />\r\n          <IntegratedGrouping />\r\n\r\n          {props.totalSummaryItems !== undefined &&\r\n            props.totalSummaryItems.length > 0 ? (\r\n            <IntegratedSummary />\r\n          ) : null}\r\n\r\n          <IntegratedSelection />\r\n          <IntegratedPaging />\r\n          <Table\r\n            cellComponent={TableCell}\r\n            columnExtensions={props.tableColumnExtensions}\r\n          />\r\n          {props.defaultColumnWidths !== undefined &&\r\n            props.defaultColumnWidths.length > 0 ? (\r\n            <TableColumnResizing\r\n              defaultColumnWidths={props.defaultColumnWidths}\r\n            />\r\n          ) : null}\r\n          {props.defaultOrder !== undefined && props.defaultOrder.length > 0 ? (\r\n            <TableColumnReordering defaultOrder={props.defaultOrder} />\r\n          ) : null}\r\n\r\n          {props.infiniteScrolling ? <VirtualTable /> : null}\r\n          <TableHeaderRow showSortingControls />\r\n\r\n          {props.hideDataExport ? (\r\n            [\r\n              props.showSelection ? (\r\n                <TableSelection selectByRowClick showSelectAll={true} />\r\n              ) : null,\r\n            ]\r\n          ) : (\r\n            <TableSelection selectByRowClick showSelectAll={true} />\r\n          )}\r\n\r\n          <TableGroupRow\r\n            showColumnsWhenGrouped={props.showColumnsWhenGrouped}\r\n          />\r\n\r\n          <TableColumnVisibility\r\n            hiddenColumnNames={hiddenColumnNames}\r\n            onHiddenColumnNamesChange={setHiddenColumnNames}\r\n          />\r\n\r\n          <Toolbar />\r\n\r\n          {props.totalSummaryItems !== undefined &&\r\n            props.totalSummaryItems.length > 0 ? (\r\n            <TableSummaryRow />\r\n          ) : null}\r\n          {props.filterRow ? <TableFilterRow showFilterSelector /> : null}\r\n          <TableFixedColumns\r\n            leftColumns={\r\n              props.leftColumns !== undefined && props.leftColumns.length > 0\r\n                ? props.leftColumns\r\n                : []\r\n            }\r\n            rightColumns={\r\n              props.rightColumns !== undefined && props.rightColumns.length > 0\r\n                ? props.rightColumns\r\n                : []\r\n            }\r\n          />\r\n\r\n          {!props.hideGrouping ? <GroupingPanel showGroupingControls /> : null}\r\n\r\n          {!props.hideSearchPanel ? <SearchPanel /> : null}\r\n\r\n          <ColumnChooser />\r\n\r\n          {props.hideDataExport ? null : (\r\n            <ExportPanel startExport={startExport} />\r\n          )}\r\n\r\n          {!props.hidePagingPanel ? (\r\n            <PagingPanel pageSizes={[10, 20, 30, 50, 70, 100, 0]} />\r\n          ) : null}\r\n        </Grid>\r\n      </div>\r\n      {/* \r\n      <div className=\"showMobileTable\">\r\n        <Grid\r\n          rows={props.rows}\r\n          columns={props.columns}\r\n          getRowId={props.getRowId ? getRowId : null}\r\n        >\r\n          <DragDropProvider />\r\n          <DateTypeProvider for={dateColumns} />\r\n\r\n          <SortingState\r\n            defaultSorting={\r\n              props.defaultSorting !== null || props.defaultSorting != undefined\r\n                ? props.defaultSorting\r\n                : []\r\n            }\r\n          />\r\n\r\n          <GroupingState\r\n            defaultExpandedGroups={defaultExpandedGroups}\r\n            // grouping={grouping}\r\n            onGroupingChange={setGrouping}\r\n          />\r\n\r\n          <SearchState defaultValue=\"\" />\r\n\r\n          <DataTypeProvider\r\n            for={\r\n              props.currencyColumns !== undefined &&\r\n              props.currencyColumns.length > 0\r\n                ? props.currencyColumns\r\n                : []\r\n            }\r\n            availableFilterOperations={[\r\n              \"greaterThanOrEqual\",\r\n              \"lessThan\",\r\n              \"lessThanOrEqual\",\r\n              \"equal\",\r\n              \"notEqual\",\r\n              \"greaterThan\",\r\n            ]}\r\n            editorComponent={CurrencyEditor}\r\n          />\r\n          {props.filteringStateColumnExtensions !== undefined &&\r\n          props.filteringStateColumnExtensions.length > 0 ? (\r\n            <FilteringState\r\n              columnExtensions={props.filteringStateColumnExtensions}\r\n              defaultFilters={[]}\r\n            />\r\n          ) : null}\r\n\r\n          <IntegratedFiltering />\r\n          {props.totalSummaryItems !== undefined &&\r\n          props.totalSummaryItems.length > 0 ? (\r\n            <SummaryState\r\n              totalItems={props.totalSummaryItems}\r\n              groupItems={\r\n                props.groupSummaryItems !== undefined &&\r\n                props.groupSummaryItems.length > 0\r\n                  ? props.groupSummaryItems\r\n                  : []\r\n              }\r\n            />\r\n          ) : null}\r\n          <PagingState\r\n            defaultPageSize={\r\n              props.defaultPageSize !== null ||\r\n              props.defaultPageSize !== undefined\r\n                ? props.defaultPageSize\r\n                : 30\r\n            }\r\n            defaultCurrentPage={0}\r\n          />\r\n\r\n          {props.mySelection ? (\r\n            <SelectionState\r\n              selection={props.selection}\r\n              onSelectionChange={props.changeSelection}\r\n            />\r\n          ) : (\r\n            <SelectionState\r\n              selection={selection}\r\n              //onSelectionChange={setSelection}\r\n              onSelectionChange={(selection) => {\r\n                updateSelectionState(selection);\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <IntegratedSorting />\r\n          <IntegratedGrouping />\r\n\r\n          {props.totalSummaryItems !== undefined &&\r\n          props.totalSummaryItems.length > 0 ? (\r\n            <IntegratedSummary />\r\n          ) : null}\r\n\r\n          <IntegratedSelection />\r\n          <IntegratedPaging />\r\n          <Table\r\n            cellComponent={TableCell}\r\n            columnExtensions={props.tableColumnExtensions}\r\n          />\r\n          {props.defaultColumnWidths !== undefined &&\r\n          props.defaultColumnWidths.length > 0 ? (\r\n            <TableColumnResizing\r\n              defaultColumnWidths={props.defaultColumnWidths}\r\n            />\r\n          ) : null}\r\n          {props.defaultOrder !== undefined && props.defaultOrder.length > 0 ? (\r\n            <TableColumnReordering defaultOrder={props.defaultOrder} />\r\n          ) : null}\r\n\r\n          {props.infiniteScrolling ? <VirtualTable /> : null}\r\n          <TableHeaderRow showSortingControls />\r\n\r\n          {props.hideDataExport ? (\r\n            [\r\n              props.showSelection ? (\r\n                <TableSelection selectByRowClick showSelectAll={true} />\r\n              ) : null,\r\n            ]\r\n          ) : (\r\n            <TableSelection selectByRowClick showSelectAll={true} />\r\n          )}\r\n\r\n          <TableGroupRow\r\n            showColumnsWhenGrouped={props.showColumnsWhenGrouped}\r\n          />\r\n\r\n          <TableColumnVisibility\r\n            hiddenColumnNames={mobileHiddenColumns}\r\n            onHiddenColumnNamesChange={setMobileHiddenColumns}\r\n          />\r\n\r\n          <Toolbar />\r\n\r\n          {props.totalSummaryItems !== undefined &&\r\n          props.totalSummaryItems.length > 0 ? (\r\n            <TableSummaryRow />\r\n          ) : null}\r\n          {props.filterRow ? <TableFilterRow showFilterSelector /> : null}\r\n          <TableFixedColumns\r\n            leftColumns={\r\n              props.leftColumns !== undefined && props.leftColumns.length > 0\r\n                ? props.leftColumns\r\n                : []\r\n            }\r\n            rightColumns={\r\n              props.rightColumns !== undefined && props.rightColumns.length > 0\r\n                ? props.rightColumns\r\n                : []\r\n            }\r\n          />\r\n\r\n          {!props.hideGrouping ? <GroupingPanel showGroupingControls /> : null}\r\n\r\n          {!props.hideSearchPanel ? <SearchPanel /> : null}\r\n\r\n          <ColumnChooser />\r\n\r\n          {props.hideDataExport ? null : (\r\n            <ExportPanel startExport={startExport} />\r\n          )}\r\n\r\n          {!props.hidePagingPanel ? (\r\n            <PagingPanel pageSizes={[10, 20, 30, 50, 70, 100, 0]} />\r\n          ) : null}\r\n        </Grid>\r\n      </div> */}\r\n\r\n      <GridExporter\r\n        ref={exporterRef}\r\n        rows={props.exportRow}\r\n        columns={props.exportColumns}\r\n        grouping={grouping}\r\n        totalSummaryItems={\r\n          props.totalSummaryItems !== undefined &&\r\n            props.totalSummaryItems.length > 0\r\n            ? props.totalSummaryItems\r\n            : []\r\n        }\r\n        groupSummaryItems={\r\n          props.groupSummaryItems !== undefined &&\r\n            props.groupSummaryItems.length > 0\r\n            ? props.groupSummaryItems\r\n            : []\r\n        }\r\n        customizeHeader={customizeHeader}\r\n        customizeFooter={customizeFooter}\r\n        selection={props.mySelection ? props.selection : selection}\r\n        onSave={onSave}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(MyComponent);\r\n"],"names":["PostDetails","sendMessage","setSendMessage","useState","theId","setId","docs","setDocs","isLoad","seLoad","isLoad2","seLoad2","incompId","setIncomp","incompObj","setIncompObje","directorsId","setdirectorsId","directorsObj","setdirectorsObj","regId","setregId","regObj","setregObj","articlesId","setarticlesId","articlesObj","setarticlesObj","postModal2","setPostModal2","comments","setComments","bussType","setBussType","invoicesId","setinvoicesId","invoicesbj","setinvoicesbj","partnerobj","setpartnerobj","byeLawobj","setbyeLawobj","map","data","type","_jsxs","style","color","children","_jsx","className","dateAdded","Date","toDateString","useEffect","RotateSpinner","size","loading","Dialog","disableEnforceFocus","fullWidth","maxWidth","open","onClose","DialogTitle","DialogContent","TableExport","hideDataExport","rows","columns","name","title","defaultExpandedGroups","grouping","defaultHiddenColumnNames","defaultPageSize","hideSelectionExport","infiniteScrolling","fileName","DialogActions","width","overflow","onClick","padding","styles","cardCategoryWhite","margin","fontSize","marginTop","marginBottom","cardTitleWhite","minHeight","fontWeight","fontFamily","textDecoration","numericInput","textAlign","CurrencyEditorBase","_ref","value","onValueChange","classes","Input","input","root","undefined","inputProps","min","placeholder","onChange","event","targetValue","target","trim","parseInt","defaultProps","CurrencyEditor","withStyles","DateFormatter","_ref2","toLocaleDateString","DateTypeProvider","props","DataTypeProvider","formatterComponent","dateColumns","_props$mobileHiddenCo","setGrouping","selection","setSelection","exporterRef","useRef","startExport","useCallback","options","current","exportGrid","getClassByValue","white","TableCell","_ref3","restProps","Table","Cell","hiddenColumnNames","setHiddenColumnNames","mobileColumns","mobileHiddenColumnNames","length","index","push","mobileHiddenColumns","setMobileHiddenColumns","Set","Grid","getRowId","id","DragDropProvider","for","SortingState","defaultSorting","GroupingState","onGroupingChange","SearchState","defaultValue","currencyColumns","availableFilterOperations","editorComponent","filteringStateColumnExtensions","FilteringState","columnExtensions","defaultFilters","IntegratedFiltering","totalSummaryItems","SummaryState","totalItems","groupItems","groupSummaryItems","PagingState","defaultCurrentPage","mySelection","SelectionState","onSelectionChange","changeSelection","passSelection","error","updateSelectionState","IntegratedSorting","IntegratedGrouping","IntegratedSummary","IntegratedSelection","IntegratedPaging","cellComponent","tableColumnExtensions","defaultColumnWidths","TableColumnResizing","defaultOrder","TableColumnReordering","VirtualTable","TableHeaderRow","showSortingControls","showSelection","TableSelection","selectByRowClick","showSelectAll","TableGroupRow","showColumnsWhenGrouped","TableColumnVisibility","onHiddenColumnNamesChange","Toolbar","TableSummaryRow","filterRow","TableFilterRow","showFilterSelector","TableFixedColumns","leftColumns","rightColumns","hideGrouping","GroupingPanel","showGroupingControls","hideSearchPanel","SearchPanel","ColumnChooser","ExportPanel","hidePagingPanel","PagingPanel","pageSizes","GridExporter","ref","exportRow","exportColumns","customizeHeader","worksheet","generalStyles","font","bold","fill","pattern","fgColor","argb","bgColor","alignment","horizontal","rowIndex","mergeCells","Object","assign","getRow","getCell","height","numFmt","getColumn","values","addRow","customizeFooter","lastRow","currentRowIndex","number","italic","onSave","workbook","xlsx","writeBuffer","then","buffer","saveAs","Blob"],"sourceRoot":""}